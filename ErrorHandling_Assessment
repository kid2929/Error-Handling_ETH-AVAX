// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

contract SimpleVotingSystem {
    // Struct to represent a proposal
    struct Proposal {
        string description;
        uint256 voteCount;
        bool executed;
    }

    // State variables
    address public owner; // Address of the contract owner
    Proposal[] public proposals; // Array to store proposals
    mapping(address => mapping(uint256 => bool)) public votes; // Tracks if an address has voted on a proposal
    mapping(address => uint256) public balances; // Balances of users

    // Events to log significant actions
    event ProposalCreated(uint256 proposalId, string description);
    event Voted(address indexed voter, uint256 proposalId);
    event ProposalExecuted(uint256 proposalId);
    event BalanceUpdated(address indexed user, uint256 newBalance);

    // Modifier to restrict access to owner-only functions
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }

    // Constructor to initialize the contract owner and initial balance
    constructor() {
        owner = msg.sender;
        balances[owner] = 1000; // Initial balance for the contract owner
    }

    // Function to create a new proposal
    function createProposal(string memory _description) public {
        require(bytes(_description).length > 0, "Description cannot be empty");
        proposals.push(Proposal({
            description: _description,
            voteCount: 0,
            executed: false
        }));
        emit ProposalCreated(proposals.length - 1, _description);
    }

    // Function to vote on a proposal
    function vote(uint256 _proposalId) public {
        require(_proposalId < proposals.length, "Invalid proposal ID");
        require(!votes[msg.sender][_proposalId], "You have already voted on this proposal");

        proposals[_proposalId].voteCount++;
        votes[msg.sender][_proposalId] = true;
        emit Voted(msg.sender, _proposalId);
    }

    // Function for the owner to execute a proposal
    function executeProposal(uint256 _proposalId) public onlyOwner {
        require(_proposalId < proposals.length, "Invalid proposal ID");
        Proposal storage proposal = proposals[_proposalId];
        require(!proposal.executed, "Proposal already executed");
        require(proposal.voteCount > 0, "Proposal must have votes to be executed");

        proposal.executed = true;
        emit ProposalExecuted(_proposalId);
    }

    // Function to deposit balance
    function deposit(uint256 _amount) public {
        require(_amount > 0, "Deposit amount must be greater than zero");

        balances[msg.sender] += _amount;
        emit BalanceUpdated(msg.sender, balances[msg.sender]);
    }

    // Function to withdraw balance
    function withdraw(uint256 _amount) public {
        require(balances[msg.sender] >= _amount, "Insufficient balance");

        balances[msg.sender] -= _amount;
        emit BalanceUpdated(msg.sender, balances[msg.sender]);
    }

    // Function to transfer balance to another address
    function transfer(address _to, uint256 _amount) public {
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        require(_to != address(0), "Invalid address");

        balances[msg.sender] -= _amount;
        balances[_to] += _amount;

        emit BalanceUpdated(msg.sender, balances[msg.sender]);
        emit BalanceUpdated(_to, balances[_to]);
    }
}
