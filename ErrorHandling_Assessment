/*
 * @dev Demonstrates the use of require(), assert(), and revert() statements.
 * Author: Vardaan Gill
 */

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

contract ErrorHandlingExample {
    address public owner;
    uint public balance;

    constructor() {
        // Set the owner to the contract deployer
        owner = msg.sender;
        balance = 0;
}
    /**
     * Deposit ether into the contract.
     */
    function deposit() public payable {
        balance += msg.value;
        emit DepositMade(msg.sender, msg.value);
    }

    /**
     * Withdraw ether from the contract.
     * @param amount The amount of ether to withdraw.
     */
    function withdraw(uint amount) public {
        if (msg.sender != owner) {
            revert("Only the owner can withdraw funds");
      }

        if (balance < amount) {
            revert("Insufficient balance in contract");
          }

        if (amount == 0) {
            revert("Withdrawal amount must be greater than zero");
           }

        balance -= amount;
        payable(owner).transfer(amount);
        emit WithdrawalMade(msg.sender, amount);
  }

    /**
     * Change the owner of the contract.
     * @param newOwner The address of the new owner.
     */
    function changeOwner(address newOwner) public {
        if (msg.sender != owner) {
            revert("Only the owner can change the owner");
        }

        if (newOwner == address(0)) {
            revert("New owner cannot be the zero address");
        }

        owner = newOwner;
        emit OwnerChanged(newOwner);
    }

    /**
     * Check the balance of the contract.
     * @return The balance of the contract.
     */
    function getBalance() public view returns (uint) {
        return balance;
    }
    // Events
    event DepositMade(address indexed sender, uint amount);
    event WithdrawalMade(address indexed sender, uint amount);
    event OwnerChanged(address indexed newOwner);
}
