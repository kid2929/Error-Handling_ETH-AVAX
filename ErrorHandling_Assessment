// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

contract ExampleContract {
    uint256 public value;
    address public owner;
    mapping(address => uint256) public balances;
    uint256 public constant MAX_UINT = 2**256 - 1;

    event ValueChanged(uint256 newValue);
    event OwnerChanged(address indexed oldOwner, address indexed newOwner);
    event BalanceUpdated(address indexed user, uint256 newBalance);

    constructor() {
        owner = msg.sender;
        balances[owner] = 1000; // Initial balance for the contract owner
    }

    // Function to set a value with require statement
    function setValue(uint256 _value) public {
        require(_value > 0, "Value must be greater than zero");
        value = _value;
        emit ValueChanged(_value);
    }

    // Function to update owner with assert statement
    function updateOwner(address _newOwner) public {
        assert(msg.sender == owner);
        address oldOwner = owner;
        owner = _newOwner;
        emit OwnerChanged(oldOwner, _newOwner);
    }

    // Function to reset value with revert statement
    function resetValue() public {
        if (msg.sender != owner) {
            revert("Only owner can reset the value");
        }
        value = 0;
        emit ValueChanged(0);
    }

    // Function to transfer balance with require statement
    function transfer(address _to, uint256 _amount) public {
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        require(_to != address(0), "Invalid address");
        
        balances[msg.sender] -= _amount;
        balances[_to] += _amount;
        
        emit BalanceUpdated(msg.sender, balances[msg.sender]);
        emit BalanceUpdated(_to, balances[_to]);
    }

    // Function to deposit balance
    function deposit(uint256 _amount) public {
        require(_amount > 0, "Deposit amount must be greater than zero");
        require(balances[msg.sender] + _amount > balances[msg.sender], "Overflow error");
        
        balances[msg.sender] += _amount;
        
        emit BalanceUpdated(msg.sender, balances[msg.sender]);
    }

    // Function to withdraw balance with revert statement
    function withdraw(uint256 _amount) public {
        if (balances[msg.sender] < _amount) {
            revert("Insufficient balance for withdrawal");
        }

        balances[msg.sender] -= _amount;
        
        emit BalanceUpdated(msg.sender, balances[msg.sender]);
    }

    // Function to check invariant using assert statement
    function checkInvariant() public view {
        assert(balances[owner] >= 1000); // Example invariant: Owner's balance should not fall below 1000
    }
}
